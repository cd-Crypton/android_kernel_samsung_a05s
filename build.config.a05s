################################################################################
## Inheriting configs from ACK
. ${ROOT_DIR}/${KERNEL_DIR}/build.config.common
. ${ROOT_DIR}/${KERNEL_DIR}/build.config.aarch64

DEFCONFIG="vendor/m269-gki_defconfig"
################################################################################
## Variant setup
MSM_ARCH=m269
VARIANTS=(consolidate gki)
[ -z "${VARIANT}" ] && VARIANT=consolidate

ABL_SRC=
SKIP_COMPILE_ABL=1
BOOT_IMAGE_HEADER_VERSION=4
BASE_ADDRESS=0x80000000
PAGE_SIZE=4096
BUILD_VENDOR_DLKM=1
PREPARE_SYSTEM_DLKM=1
SYSTEM_DLKM_MODULES_LIST=${ROOT_DIR}/${KERNEL_DIR}/android/gki_system_dlkm_modules
SUPER_IMAGE_SIZE=0x10000000
TRIM_UNUSED_MODULES=1
BUILD_INIT_BOOT_IMG=1
MODULES_LIST_ORDER="1"
[ -z "${DT_OVERLAY_SUPPORT}" ] && DT_OVERLAY_SUPPORT=1

if [ "${KERNEL_CMDLINE_CONSOLE_AUTO}" != "0" ]; then
	KERNEL_VENDOR_CMDLINE+=' console=ttyMSM0,115200n8 earlycon=qcom_geni,0x4a90000 qcom_geni_serial.con_enabled=1 '
fi

KERNEL_VENDOR_CMDLINE+=' bootconfig '
################################################################################
## Inheriting MSM configs
CONFIG_DIR=arch/${ARCH}/configs

BRANCH=msm-kernel
CONFIG_TARGET=msm.${MSM_ARCH}

GKI_KLEAF_SUPPRESS_BUILD_SH_DEPRECATION_WARNING=1
KLEAF_SUPPRESS_BUILD_SH_DEPRECATION_WARNING=1

FILES+="
.config
Module.symvers
"

# Helper function to let build.config files merge config fragments
# Usage: append_cmd PRE_DEFCONFIG_CMDS 'merge_defconfig_fragment ${DEFCONFIG} ${fragment_config}'
DEFCONFIG_FRAGMENTS=""
function merge_defconfig_fragments() {
  if ( [ -z "${DEFCONFIG_FRAGMENTS}" ] ||
     [ "${DEFCONFIG_FRAGMENTS}" = "${DEFCONFIG}" ] ); then
    echo "No defconfig fragments for ${DEFCONFIG}"
    return
  fi
  local output=$(mktemp)
  KCONFIG_CONFIG=${KERNEL_DIR}/arch/${ARCH}/configs/${DEFCONFIG} \
    ${KERNEL_DIR}/scripts/kconfig/merge_config.sh \
    -m -r -y ${DEFCONFIG_FRAGMENTS} | tee $output
  set +x
  if grep -q -E -e "Previous value: [^=]+=[ym]" $output; then
    echo "========================================================"
    echo "ERROR! Detected overridden config!"
    grep -C 1 -E -e "Previous value: [^=]+=[ym]" $output >&2
    rm $output
    exit 1
  fi
  local temp_config=$(mktemp)
  (cd ${KERNEL_DIR} && KCONFIG_CONFIG=${temp_config} make "${TOOL_ARGS[@]}" O=${OUT_DIR} "${MAKE_ARGS[@]}" ${DEFCONFIG}) 2>&1 | tee $output
  if grep -q -e "warning:" $output; then
    echo "========================================================"
    echo "ERROR! Treating config warnings as errors"
    grep -e "warning" $output >&2
    rm $output $temp_config
    exit 1
  fi
  rm $output $temp_config
  set -x

}
append_cmd PRE_DEFCONFIG_CMDS "merge_defconfig_fragments"

function check_merged_defconfig() {
  if ( [ -z "${DEFCONFIG_FRAGMENTS}" ] ||
     [ "${DEFCONFIG_FRAGMENTS}" = "${DEFCONFIG}" ] ); then
    return
  fi
  local output=$(mktemp)
  ${KERNEL_DIR}/scripts/diffconfig "${KERNEL_DIR}/arch/${ARCH}/configs/${DEFCONFIG}" ${OUT_DIR}/.config > $output
  set +x
  # Allow CONFIG_CMDLINE changes
  if grep -q -v -E -e "^\+" -e "^CMDLINE " $output; then
    echo "========================================================"
    echo "ERROR! Defconfig fragment did not apply as expected"
    grep -v -E -e "^\+" -e "^CMDLINE " $output
    rm $output
    exit 1
  fi
  rm $output
  set -x
}
append_cmd POST_DEFCONFIG_CMDS "check_merged_defconfig"

# Wrapper function around merge_defconfig_fragment to reduce repeated logic
# Usage: apply_defconfig_fragment ${KERNEL_DIR}/cuttlefish.fragment cuttlefish-gki_defconfig
function apply_defconfig_fragment() {
  FRAGMENT_CONFIG=$1
  if [ -z "${DEFCONFIG_FRAGMENTS}" ]; then
    DEFCONFIG_FRAGMENTS="${KERNEL_DIR}/arch/${ARCH}/configs/${DEFCONFIG}"
  fi
}

################################################################################
# Common MSM configuration for building GKI-based kernels

# Configuration options to build images for MSM targets
# Must be included AFTER build.config.msm.<target>

# boot image macros
BUILD_BOOT_IMG=1
BUILD_INITRAMFS=1

ABI_DEFINITION=android/abi_gki_aarch64.xml
KMI_SYMBOL_LIST=android/abi_gki_aarch64
ADDITIONAL_KMI_SYMBOL_LISTS="
android/abi_gki_aarch64_virtual_device
android/abi_gki_aarch64_virtual_device_removed
android/abi_gki_aarch64_db845c
android/abi_gki_aarch64_fips140
android/abi_gki_aarch64_pixel
android/abi_gki_aarch64_mtktv
android/abi_gki_aarch64_qcom
"
KMI_SYMBOL_LIST_MODULE_GROUPING=0
KMI_SYMBOL_LIST_ADD_ONLY=1
KMI_ENFORCED=1

MAKE_GOALS="modules dtbs"
GKI_SKIP_IF_VERSION_MATCHES=1
GKI_SKIP_CP_KERNEL_HDR=1

function sanity_check_abi() {
	if [ -z "${GKI_BUILD_CONFIG}" ] ; then
		# When running build_abi.sh, mixed build is explicitly disabled
		# In that case, turn on some options for trimming and strict mode
		# which would normally be disabled because they conflict with
		# mixed build
		PREPARE_SYSTEM_DLKM=0
		if [ "${VARIANT}" = gki ]; then
			TRIM_NONLISTED_KMI=1
			KMI_SYMBOL_LIST_STRICT_MODE=1
		fi
		return
	fi
}
append_cmd POST_DEFCONFIG_CMDS 'sanity_check_abi'

function build_defconfig_fragments() {
	if [[ "${VARIANT}" =~ ^(gki|consolidate)$ ]]; then
		apply_defconfig_fragment ${KERNEL_DIR}/arch/${ARCH}/configs/vendor/${MSM_ARCH}_GKI.config vendor/${MSM_ARCH}-gki_defconfig
    apply_defconfig_fragment ${KERNEL_DIR}/arch/${ARCH}/configs/vendor/${MSM_ARCH}_sec_defconfig vendor/${MSM_ARCH}-gki_defconfig
		if [ "${VARIANT}" = gki ]; then
			return
		fi
		# ABI comparison isn't applicable on consolidate variant
		unset ABI_DEFINITION
	elif [ "${VARIANT}" = gki-ack ]; then
		# In gki-only, then using ACK's GKI config directly
		. ${KERNEL_DIR}/build.config.gki
	else
		echo "Variant '${VARIANT}' unsupported by gki"
		exit 1
	fi
}
build_defconfig_fragments
